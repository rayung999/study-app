https://www.boostcourse.org/cs112



● 자바 문법 

○ 기본 구조

	// Hello : 클래스 명
class Hello {					
	public static void main(String[] args) {  	
			// main : 	명령의 실행을 시작하는 시작점 (메서드 명)		
			// args : 외부 콘솔 입력값			
			// void : 리턴값 유형				
	//명령문 작성	
	}
}



○ 소스파일 - 클래스 블록 - .class 파일

# Exam01.java →→→→→컴파일→→→→→→ # .class

        class A {} →→→→→→→→→→→→  A.class
        class B {} →→→→→→→→→→→→  B.class
        class C {} →→→→→→→→→→→→  C.class


> java파일 안에 3개의 class 를 컴파일하면 클래스 파일이 3개 생성 
		-하나의 클래스 블록 당 한개의 클래스 파일 생성 

> 소스파일명 이랑 클래스 파일명은 상관없음

	> 하지만 유지 보수가 쉽도록 1클래스 1소스파일을 사용한다.

	> 유지 보수가 쉽도록 클래스 명과 소스파일 명을 같게 하는 것을 권장

> public(공개)로 설정된 클래스일 경우는 파일명이랑 클래스 명이 같아야 한다.

	> 하나의 파일에 두개의 public 클래스는 존재하지 않는다.
	
>명령 프롬프트 = 콘솔 (console) = command Line Interface (CLI)




○ entry point : main() {}
		> JVM이 명령문 실행을 시작하는 곳

> main메서드가 없는 상태에서 컴파일하면 에러뜸

> public static void main(String[] args) {} 는 시작점의 약속 

> class는 메서드를 분류하는 영역 / 메서드는 명령문을 분류하는 영역 
 				 	

※명령창 컴파일 >javac Exam03.java (javac 소스파일명)
	실행 >java Exam03 (java 클래스명) 




○ 자바 문법

1. Literal : 데이터 표기법 

	> 정수		-2진수: 0b0110 / 0B0110 (b=binary) 
	(integer)		-8진수: 012  
			-16진수: 0x12 / 0X12

		- data type : 자바언어에서 기본으로 제공하는 데이터 타입 > primitive data type (자바 원시 데이터 타입)
			▶[ 1byte > byte / 2byte > short / 4byte > int / 8byte > long ]   --- primitive data type


	>소수점		-고정소수점: 3.14 
	(floating point)	-부동소수점: (2번째 공책 필기 참고) 31.4E-1 / 31.4e-1

			▶[ 4byte > float / 8byte > double ]   --- primitive data type


	>논리		-true
	(boolean)		-false

			▶[ 4byte > boolean ]   --- primitive data type

	
	>문자		- '_(스페이스)' 
	(character)	- 'A'  (single quotation) > 한개의 문자만 가능

		            // 프롬포트에서 '가' 컴파일 하려면 " >javac -encoding UTF-8 자바파일명 > enter "
						> encoding : xx형식으로 변환하라. (코드화)
				        코덱 (codec) > encoding(변환) <-> decoding(복원) [*.zip , *.gif ...etc.]
					(필기 참고)> 동영상 압축 방법 : MPEG, H.264 ...etc. (방법=algorithm)
							- avi(기본) + 압축해제 플러그인 (코덱)

			▶[ 2byte > char ]   --- primitive data type
	
	>문자열		- "ABCDE" (double quotation)
	(string)		- "가나다"
			- "" (빈 문자열)

			▶[ 객체 > String ]   --- 클래스 

	>주석	 	- 코드에 대한 부가 설명
	(comments)	- 주석은 컴파일에서 제외된다. ( .class파일에 포함되지 않는다 )
			- //한 줄 주석 > 줄 끝까지
			- /*	*/   > 여러 줄 주석

				
					※ primitive data type
					▶[ 1byte > byte  /  2byte > short  /  4byte > int  /  8byte > long ]
					▶[ 4byte > float  /  8byte > double ]
					▶[ 4byte > boolean ]
					▶[ 2byte > char ]

					※ 클래스 
					▶[ 객체 > String ]

	
						


2. variables : 메모리 준비시키는 명령문			(ex) int age; > 메모리를 준비시키는 명령문을 "변수 선언"
								> variables declaration
									

	>저장할 데이터의 유형	- data type	(ex) int	-정수값을 담을 4byte크기의 메모리를 준비하라!
							 
	> 메모리를 가리키는 이름	- variable name 	(ex) age;	-준비된 메모리를 지금부터 age라 부르겠다.

	> 변수 선언		-int a;	
				-char c;
				-boolean b;
				-float f;




	
3. operators : 데이터 연산자

	>assignment operators 할당연산자 : 준비한 메모리 변수에 값 저장

				- 변수명 = 값 ;
				- 변수명 : 메모리 이름, 변수 선언할 때 지정한 이름
				-   =    : 할당 연산자 배정 
				-   값   : 리터럴, 변수명 
				ex)  int a;		int b;    (필기 참고)
				   a=100;		b=a;	
				> 메모리의 들어있는 값 100을 b 변수에 저장! 




				> 메모리 크기와 값의 범위 	- 1byte메모리  ( -128 ~ 127 ) 

				> 메모리 크기와 값 저장 : 모든 데이터는 전기적 신호로 저장.
							- 1byte = 8bit ( bit : 전기를 담는 그릇 ) 
							- 1bit : 2개의 상태 표현 / 2bit : 4개의 상태 표현 ... etc.  
									> 2의 (bit개수)의 제곱 값

				> 정수값을 비트에 저장 (필기참고) -☆☆☆☆☆☆2번째공책에 있음☆☆☆☆☆☆
	
				> 비트의 전기 상태를 효과적으로 표시하기 	- 2진수로 표현한다
						-어떤 값을 메모리에 저장하려면 2진수로 바꿔서 저장.
				
				> 값 →→→→→→→→→→→→→→2진수→→→→→→→→→→→→→→메모리
				   	 -어떤 값이든 2진수로
					표현할 수 있다면 메모리에 
				      	  저장할 수 있다.
								- 정수 → 2진수
								- 부동소수점 → 2진수 
								- 문자 → 2진수 
								- 논리 값 → 2진수
								   ...etc. 
				
				> 정수를 2진수로 표현하는 다양한 방법 ( 필기 참고 ) 

					1) sign - Magnitude    (자바에서는 이 방법을 사용하지 않음 ) 
						- 부동소수점을 2진수로 바꾸는 과정에서 가수부를 표현할 때 이 규칙을 사용함
							+4 → 0100
							-4 → 1100       뒤에 100 = 절대값 
								        앞에 0,1 = 부호비트
		
					2) 1의 보수  - 1이 되기 위해 보충해주는 수  ( 자바, c .. 이 방법 사용 안함)
						- 나와야 할 결과보다 1 작은 수가 결과로 나온다.
							+4 → 0100
							-4 → 0100  →→→→1의 보수 →→→ 1011   

					3) 2의 보수 - 1의 보수 규칙으로 변환 후 +1을 해주는 규칙 
						-자바와 같이 대부분의 프로그래밍 언어가 사용함 
							+4 → 0100
							-4 → 0100  →→→→1의 보수 →→→ 1011 →→→  +1  →→→→ 1101 

					4) Excess-K (초과한 bias , K=여분으로 추가하는 값 ) ★필기참고!!!!!!!!!!!!!!!!!!!!!!!!!!
						- K값 = 2의 (비트수-1)의 제곱 -1 
						- 부동소수점을 2진수로 바꾸는 과정에서 지수부를 표현할 때 이 규칙을 사용함 
							+4 →→→→ 4+128=132 →→→→ 132 →→→→2진수  →  10000100  
							-4 →→→→ -4+128+124 →→→→ 124 →→→→2진수  →  011111100
	

					※ 부동소수점을 2진수로 표현하는 방법 - 2번째 공책 필기 참고

						> 1) sign-Magnitude의 가수부 표현과 
							2) Excess-k의 지수부 표현을 같이 해서 부동소수점 표현
  


					    	 
							


4. 흐름 제어문 : 반복문, 조건문 
5. 메서드 : 명령어 묶음
6. 클래스 : 메서드 묶음 






















